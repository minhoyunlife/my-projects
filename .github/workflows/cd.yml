name: CD

on:
  workflow_dispatch:
  push:
    branches:
      # - "main"
      - "**" # temp
    paths-ignore:
      - "**/*.md"
      - ".vscode/**"
      - "docker-compose.yml"
      - ".github/**"
      - "!.github/workflows/cd.yml" # 편의를 위해, 본 워크플로우의 변경 시에는 트리거되도록

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  GITHUB_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.check-changes.outputs.packages }}
      migrations: ${{ steps.check-migration.outputs.migrations }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.10.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"
      - name: Detect which packages are changed
        id: check-changes
        uses: ./.github/actions/detect-changes
        with:
          # base-ref: ${{ github.event.before }}
          base-ref: "origin/main" # temp
      - name: Check Migration Changes
        uses: ./.github/actions/check-migration
        id: check-migration
        with:
          # base-ref: ${{ github.event.before }}
          base-ref: "origin/main" # temp

  build-images:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.packages != '[]' && needs.detect-changes.outputs.packages != '' }}
    strategy:
      matrix:
        packages: ${{ fromJson(needs.detect-changes.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push images
        id: build
        run: |
          IMAGE_TAG=$ECR_REGISTRY/my-project/${{ matrix.packages }}:${GITHUB_SHA::7}
          # docker build \
          #   --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} \
          #   --build-arg NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} \
          #   -f docker/${{ matrix.packages }}.prod.Dockerfile \
          #   -t $IMAGE_TAG .
          # docker push $IMAGE_TAG
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      - name: Save build outputs
        uses: cloudposse/github-action-matrix-outputs-write@v1
        id: write-output
        with:
          matrix-step-name: ${{ github.job }}
          matrix-key: ${{ matrix.packages }}
          outputs: |
            image-tag: ${{ steps.build.outputs.image-tag }}

  read-build-outputs:
    runs-on: ubuntu-latest
    needs: [build-images]
    outputs:
      backend_image_tag: ${{ steps.get-backend-image-tag.outputs.tag }}
      cms_frontend_image_tag: ${{ steps.get-cms-frontend-image-tag.outputs.tag }}
    steps:
      - name: Get build outputs
        uses: cloudposse/github-action-matrix-outputs-read@v1
        id: read-output
        with:
          matrix-step-name: build-images
      - name: Debug raw data
        run: |
          echo "Raw output data:"
          echo '${{ steps.read-output.outputs.result }}'
      - name: Debug parsed data
        run: |
          echo "Backend tag value:"
          echo '${{ steps.read-output.outputs.result }}' | jq -r '."image-tag"."backend"'
          echo "CMS Frontend tag value:"
          echo '${{ steps.read-output.outputs.result }}' | jq -r '."image-tag"."cms-frontend"'
      - name: Get the backend image tag
        id: get-backend-image-tag
        run: |
          echo "tag=$(echo '${{ steps.read-output.outputs.result }}' | jq -r '."image-tag"."backend"')" >> $GITHUB_OUTPUT
      - name: Get the cms-frontend image tag
        id: get-cms-frontend-image-tag
        run: |
          echo "tag=$(echo '${{ steps.read-output.outputs.result }}' | jq -r '."image-tag"."cms-frontend"')" >> $GITHUB_OUTPUT
      - name: Debug GITHUB_OUTPUT
        run: |
          echo "Current GITHUB_OUTPUT content:"
          cat $GITHUB_OUTPUT

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [read-build-outputs]
    steps:
      - name: Get image tag
        run: |
          echo "All outputs from read-build-outputs:"
          echo "${{ toJSON(needs.read-build-outputs.outputs) }}"
          echo "cms-frontend image tag:"
          echo "${{ needs.read-build-outputs.outputs.cms_frontend_image_tag }}"

  # deploy-frontend:
  #   needs: [detect-changes, build-images]
  #   if: contains(fromJson(needs.detect-changes.outputs.packages), 'cms-frontend')
  #   runs-on: ubuntu-latest
  #   environment: production
  #   steps:
  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}
  #     - id: get-image
  #       run: |
  #         IMAGE_TAG=$(echo '${{ needs.build-images.outputs.image-tags }}' | jq -r '.cms')
  #         echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
  #     - run: |
  #         TASK_DEF=$(aws ecs describe-task-definition \
  #           --task-definition my-projects-cms-frontend \
  #           --query 'taskDefinition' \
  #           --output json)
  #         echo "$TASK_DEF" > ./task-definitions/cms-frontend.json
  #     - uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       id: render-taskdef
  #       with:
  #         task-definition: ./task-definitions/cms-frontend.json
  #         container-name: cms-frontend
  #         image: ${{ steps.get-image.outputs.tag }}
  #     - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.render-taskdef.outputs.task-definition }}
  #         service: my-projects-cms
  #         cluster: my-projects-cluster
  #         wait-for-service-stability: true
