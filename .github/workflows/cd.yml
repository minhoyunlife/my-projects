name: CD

on:
  workflow_dispatch: # 수동 트리거 가능하도록
  push:
    branches:
      # - "main"
      - "**" # temp
    paths-ignore:
      - "**/*.md"
      - ".vscode/**"
      - "docker-compose.yml"
      - ".github/**"
      - "!.github/workflows/cd.yml" # 편의를 위해, 본 워크플로우의 변경 시에는 트리거되도록

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.check-changes.outputs.packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.10.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.17.0"
      - name: Detect which packages are changed
        id: check-changes
        uses: ./.github/actions/detect-changes
        with:
          # base-ref: ${{ github.event.before }}
          base-ref: "origin/main" # temp

  build-packages:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.packages != '[]' && needs.detect-changes.outputs.packages != '' }}
    strategy:
      matrix:
        packages: ${{ fromJson(needs.detect-changes.outputs.packages) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          GITHUB_TOKEN: ${{ secrets.PACKAGES_TOKEN }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: |
          docker build --build-arg GITHUB_TOKEN=${GITHUB_TOKEN} --build-arg NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} -f docker/${{matrix.packages}}.prod.Dockerfile -t $ECR_REGISTRY/my-project/${{ matrix.packages }}:${GITHUB_SHA::7} .
          docker push $ECR_REGISTRY/my-project/${{ matrix.packages }}:${GITHUB_SHA::7}
      - name: Update ECS Task Definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        run: |
          # 태스크 정의를 취득
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition my-projects-${{ matrix.packages }} --query 'taskDefinition' --output json)

          # 새 이미지 태그로 태스크 정의를 변경
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/my-project/${{ matrix.packages }}:${GITHUB_SHA::7}" '.containerDefinitions[0].image = $IMAGE')
          echo "$NEW_TASK_DEFINITION" > task-definition.json

          # 새 태스크 정의를 등록 후 ARN 취득
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://task-definition.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo $NEW_TASK_DEF_ARN
          echo "arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
      - name: Update ECS Service
        run: |
          # 새 서비스 정의를 등록
          aws ecs update-service \
            --cluster my-projects-cluster \
            --service ${{ matrix.packages }} \
            --task-definition ${{ steps.task-def.outputs.arn }} \
            --force-new-deployment
      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster my-projects-cluster \
            --services ${{ matrix.packages }}
